                                        Cheat Sheet 


# üßæ Git & GitHub Cheat Sheet (Basic to Medium Level)

---

## üîß Git Configuration

| Command                                            | Description                                    |
| -------------------------------------------------- | ---------------------------------------------- |
| `git config --global user.name "Your Name"`        | Set the global username for commits            |
| `git config --global user.email "you@example.com"` | Set the global email for commits               |
| `git config --list`                                | List all Git configuration settings            |
| `git config --global core.editor nano`             | Set the default editor (e.g., nano, vim, code) |

---

## üìÅ Repository Setup

| Command                       | Description                            |
| ----------------------------- | -------------------------------------- |
| `git init`                    | Initialize a new Git repository        |
| `git clone <repo-url>`        | Clone a remote repository locally      |
| `git remote -v`               | View remote repository URLs            |
| `git remote add origin <url>` | Add a remote repository named `origin` |

---

## üìÑ Basic File Operations

| Command            | Description                                              |
| ------------------ | -------------------------------------------------------- |
| `git status`       | Show the status of changes (staged, unstaged, untracked) |
| `git add <file>`   | Stage a specific file                                    |
| `git add .`        | Stage all changed files                                  |
| `git reset <file>` | Unstage a file                                           |
| `git rm <file>`    | Remove a file and stage the removal                      |

---

## üíæ Commit & History

| Command                    | Description                               |
| -------------------------- | ----------------------------------------- |
| `git commit -m "message"`  | Commit staged changes with a message      |
| `git commit -am "message"` | Add & commit tracked files in one command |
| `git log`                  | Show commit history                       |
| `git log --oneline`        | Compact view of commit history            |
| `git log -p <file>`        | View changes in a file over commits       |

---

## üîÑ Branching & Merging

| Command                    | Description                        |
| -------------------------- | ---------------------------------- |
| `git branch`               | List branches                      |
| `git branch <branch-name>` | Create a new branch                |
| `git checkout <branch>`    | Switch to a branch                 |
| `git checkout -b <branch>` | Create and switch to a new branch  |
| `git merge <branch>`       | Merge a branch into current branch |
| `git branch -d <branch>`   | Delete a branch (safe)             |
| `git branch -D <branch>`   | Force delete a branch              |

---

## ‚¨ÜÔ∏è Pushing & Pulling

| Command                       | Description                           |
| ----------------------------- | ------------------------------------- |
| `git push`                    | Push changes to the remote repository |
| `git push -u origin <branch>` | Push branch and set upstream          |
| `git pull`                    | Fetch and merge from remote           |
| `git fetch`                   | Fetch remote changes without merging  |
| `git pull --rebase`           | Rebase instead of merge while pulling |

---

## üß™ Stashing Changes

| Command           | Description                     |
| ----------------- | ------------------------------- |
| `git stash`       | Save changes without committing |
| `git stash list`  | List all stashes                |
| `git stash apply` | Reapply stashed changes         |
| `git stash pop`   | Apply and remove the stash      |
| `git stash drop`  | Remove a specific stash         |

---

## üïµÔ∏è‚Äç‚ôÇÔ∏è Inspection & Troubleshooting

| Command                            | Description                       |
| ---------------------------------- | --------------------------------- |
| `git diff`                         | Show unstaged changes             |
| `git diff --staged`                | Show staged changes               |
| `git blame <file>`                 | Show who last modified each line  |
| `git show <commit>`                | Show details of a specific commit |
| `git log --graph --all --decorate` | Visualize branch history          |

---

## üßº Reset, Revert & Clean

| Command                      | Description                             |
| ---------------------------- | --------------------------------------- |
| `git reset --soft <commit>`  | Move HEAD, keep changes staged          |
| `git reset --mixed <commit>` | Move HEAD, unstage changes              |
| `git reset --hard <commit>`  | Discard all changes to a commit         |
| `git revert <commit>`        | Create a new commit that undoes changes |
| `git clean -fd`              | Delete untracked files and folders      |

---

## üîê Tags

| Command                              | Description                   |
| ------------------------------------ | ----------------------------- |
| `git tag`                            | List tags                     |
| `git tag <tag-name>`                 | Create a new tag              |
| `git tag -a <tag-name> -m "message"` | Create annotated tag          |
| `git push origin <tag-name>`         | Push a tag to remote          |
| `git push origin --tags`             | Push all local tags to remote |

---

## üîÑ Rebase & Cherry-pick

| Command                    | Description                             |
| -------------------------- | --------------------------------------- |
| `git rebase <branch>`      | Rebase current branch onto another      |
| `git cherry-pick <commit>` | Apply specific commit to current branch |

---

## üë• GitHub-Specific Commands (Using CLI)

| Command                        | Description                  |
| ------------------------------ | ---------------------------- |
| `gh auth login`                | Authenticate with GitHub CLI |
| `gh repo clone <owner>/<repo>` | Clone a GitHub repo          |
| `gh issue list`                | List GitHub issues           |
| `gh pr create`                 | Create a pull request        |
| `gh pr checkout <number>`      | Checkout a PR locally        |
| `gh pr merge`                  | Merge a pull request         |

---

## üîß Useful Shortcuts & Tips

| Tip          | Description                                |
| ------------ | ------------------------------------------ |
| `git add -p` | Add changes interactively (patches)        |
| `.gitignore` | Ignore files from version control          |
| `git alias`  | Create shortcuts for frequent Git commands |
| `git reflog` | Recover lost commits                       |
| `git bisect` | Binary search for bug introduction         |

---
